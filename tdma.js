// Given Var
var DX = 0.25;  // for first case, DX = 0.25
// var DX = 0.01;  // for second case, DX = 0.01

var mL = 2;
var D = 2 + mL * mL * (DX * DX);

// m is the number of points
var m = 1 / DX;

// unknown is theta
theta_TDMA = new Array(m);
for (var i = 0; i < m; i++) {
  theta_TDMA[i] = 0;
}
// console.log(theta_TDMA);

// TDMA
a = new Array(m);
b = new Array(m);
c = new Array(m);
d = new Array(m);
for (var i = 0; i < m; i++) {
  a[i] = 0;
  b[i] = 0;
  c[i] = 0;
  d[i] = 0;
}

for (var i = 1; i < m - 1; i++) {
  a[i] = -1;
}
a[m - 1] = -2;

for (var i = 0; i < m; i++) {
  b[i] = D;
}

for (var i = 0; i < m - 1; i++) {
  c[i] = -1;
}

d[0] = 1;
gamma = new Array(m);
beta = new Array(m);

for (var i = 0; i < m; i++) {
  gamma[i] = 0;
  beta[i] = 0;
}

beta[0] = b[0];
gamma[0] = d[0] / beta[0];

for (var i = 1; i < m; i++) {
  beta[i] = b[i] - (a[i] * c[i - 1]) / beta[i - 1];
  gamma[i] = d[i] - (a[i] * gamma[i - 1]) / beta[i];
}

theta_TDMA[m - 1] = gamma[m - 1];

for (var k = m - 2; k >= 0; k--) {
  theta_TDMA[k] = gamma[k] - (c[k] * theta_TDMA[k + 1]) / beta[k];
}


console.log('Solution is: ', JSON.stringify(theta_TDMA));

// OUTPUT: (for DX=0.25)
// Solution is:  [0.6289041821069349,0.41503440974060346,0.304923239809423,0.2710428798305982]

// OUTPUT: (for DX=0.01)
// Solution is:  [0.9809185314973035,0.9622294304072058,0.9439252210892709,0.9259985818597716,0.9084423420630162,0.8912494792030858,0.8744131161348366,0.8579265183130413,0.8417830910985711,0.8259763771205402,0.8105000536933573,0.7953479302876517,0.7805139460540613,0.7659921673988926,0.7517767856106834,0.7378621145367183,0.724242588308568,0.7109127591157411,0.6978672950265605,0.6851009778553907,0.672608701075363,0.6603854677757653,0.6484263886632781,0.6367266801062561,0.6252816622212766,0.6140867570011855,0.603137486483895,0.5924294709611979,0.5819584272268852,0.5717201668634633,0.5617105945667866,0.5519257065079367,0.5423615887316898,0.5330144155909358,0.523880448216418,0.5149560330211869,0.5062376002391642,0.49772166249723715,0.48940481342030895,0.4812837262687488,0.4733551526076961,0.46561592100768645,0.45806293577607976,0.4506931757187834,0.44350369293177455,0.43649161162193834,0.42965412695675087,0.42298850394234605,0.41649207632951807,0.4101622455472219,0.40399647966314467,0.3979923123709326,0.39214734200366885,0.38645923057320664,0.3809257028349737,0.3755445453778747,0.37031360573892685,0.36523079154227456,0.3602940696622392,0.3555014654100687,0.3508510617440623,0.34634099850275335,0.34196947166084557,0.33773473260760206,0.33363508744740156,0.32966889632217994,0.3258345727554872,0.32213058301789665,0.3185554455135132,0.3151077301873352,0.3117860579532321,0.30858910014231034,0.3055155779714455,0.3025642620317692,0.29973397179690564,0.29702357515076083,0.29443198793467634,0.2919581735137657,0.28960114236226053,0.28735995166770023,0.28523370495380707,0.2832215517218954,0.28132268711067254,0.2795363515742939,0.2778618305785451,0.2762984543150276,0.27484559743323617,0.273502678790418,0.27226916121911604,0.2711445513123017,0.2701283992260123,0.2692202984994133,0.26841988589221405,0.2677268412393716,0.267140887323025,0.26666178976160754,0.2662893569160947,0.26602343981334825,0.26586393208652714,0.26581076993254066]